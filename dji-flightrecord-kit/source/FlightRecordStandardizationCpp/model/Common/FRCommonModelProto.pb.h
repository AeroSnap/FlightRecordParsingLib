// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/FRCommonModelProto.proto

#ifndef PROTOBUF_Common_2fFRCommonModelProto_2eproto__INCLUDED
#define PROTOBUF_Common_2fFRCommonModelProto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_Common_2fFRCommonModelProto_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsLocationCoordinate2DImpl();
void InitDefaultsLocationCoordinate2D();
void InitDefaultsVelocityImpl();
void InitDefaultsVelocity();
void InitDefaultsAttitudeImpl();
void InitDefaultsAttitude();
void InitDefaultsGPSSignalImpl();
void InitDefaultsGPSSignal();
inline void InitDefaults() {
  InitDefaultsLocationCoordinate2D();
  InitDefaultsVelocity();
  InitDefaultsAttitude();
  InitDefaultsGPSSignal();
}
}  // namespace protobuf_Common_2fFRCommonModelProto_2eproto
namespace DJIFRProto {
namespace Standard {
class Attitude;
class AttitudeDefaultTypeInternal;
extern AttitudeDefaultTypeInternal _Attitude_default_instance_;
class GPSSignal;
class GPSSignalDefaultTypeInternal;
extern GPSSignalDefaultTypeInternal _GPSSignal_default_instance_;
class LocationCoordinate2D;
class LocationCoordinate2DDefaultTypeInternal;
extern LocationCoordinate2DDefaultTypeInternal _LocationCoordinate2D_default_instance_;
class Velocity;
class VelocityDefaultTypeInternal;
extern VelocityDefaultTypeInternal _Velocity_default_instance_;
}  // namespace Standard
}  // namespace DJIFRProto
namespace DJIFRProto {
namespace Standard {

enum GPSSignal_Level {
  GPSSignal_Level_Level0 = 0,
  GPSSignal_Level_Level1 = 1,
  GPSSignal_Level_Level2 = 2,
  GPSSignal_Level_Level3 = 3,
  GPSSignal_Level_Level4 = 4,
  GPSSignal_Level_Level5 = 5,
  GPSSignal_Level_Unknown = 6,
  GPSSignal_Level_GPSSignal_Level_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GPSSignal_Level_GPSSignal_Level_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GPSSignal_Level_IsValid(int value);
const GPSSignal_Level GPSSignal_Level_Level_MIN = GPSSignal_Level_Level0;
const GPSSignal_Level GPSSignal_Level_Level_MAX = GPSSignal_Level_Unknown;
const int GPSSignal_Level_Level_ARRAYSIZE = GPSSignal_Level_Level_MAX + 1;

const ::google::protobuf::EnumDescriptor* GPSSignal_Level_descriptor();
inline const ::std::string& GPSSignal_Level_Name(GPSSignal_Level value) {
  return ::google::protobuf::internal::NameOfEnum(
    GPSSignal_Level_descriptor(), value);
}
inline bool GPSSignal_Level_Parse(
    const ::std::string& name, GPSSignal_Level* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GPSSignal_Level>(
    GPSSignal_Level_descriptor(), name, value);
}
// ===================================================================

class LocationCoordinate2D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.LocationCoordinate2D) */ {
 public:
  LocationCoordinate2D();
  virtual ~LocationCoordinate2D();

  LocationCoordinate2D(const LocationCoordinate2D& from);

  inline LocationCoordinate2D& operator=(const LocationCoordinate2D& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LocationCoordinate2D(LocationCoordinate2D&& from) noexcept
    : LocationCoordinate2D() {
    *this = ::std::move(from);
  }

  inline LocationCoordinate2D& operator=(LocationCoordinate2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LocationCoordinate2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocationCoordinate2D* internal_default_instance() {
    return reinterpret_cast<const LocationCoordinate2D*>(
               &_LocationCoordinate2D_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LocationCoordinate2D* other);
  friend void swap(LocationCoordinate2D& a, LocationCoordinate2D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LocationCoordinate2D* New() const PROTOBUF_FINAL { return New(NULL); }

  LocationCoordinate2D* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LocationCoordinate2D& from);
  void MergeFrom(const LocationCoordinate2D& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LocationCoordinate2D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double latitude = 1;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  double latitude() const;
  void set_latitude(double value);

  // double longitude = 2;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  double longitude() const;
  void set_longitude(double value);

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.LocationCoordinate2D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double latitude_;
  double longitude_;
  mutable int _cached_size_;
  friend struct ::protobuf_Common_2fFRCommonModelProto_2eproto::TableStruct;
  friend void ::protobuf_Common_2fFRCommonModelProto_2eproto::InitDefaultsLocationCoordinate2DImpl();
};
// -------------------------------------------------------------------

class Velocity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.Velocity) */ {
 public:
  Velocity();
  virtual ~Velocity();

  Velocity(const Velocity& from);

  inline Velocity& operator=(const Velocity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Velocity(Velocity&& from) noexcept
    : Velocity() {
    *this = ::std::move(from);
  }

  inline Velocity& operator=(Velocity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Velocity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Velocity* internal_default_instance() {
    return reinterpret_cast<const Velocity*>(
               &_Velocity_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Velocity* other);
  friend void swap(Velocity& a, Velocity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Velocity* New() const PROTOBUF_FINAL { return New(NULL); }

  Velocity* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Velocity& from);
  void MergeFrom(const Velocity& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Velocity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float velocityX = 1;
  void clear_velocityx();
  static const int kVelocityXFieldNumber = 1;
  float velocityx() const;
  void set_velocityx(float value);

  // float velocityY = 2;
  void clear_velocityy();
  static const int kVelocityYFieldNumber = 2;
  float velocityy() const;
  void set_velocityy(float value);

  // float velocityZ = 3;
  void clear_velocityz();
  static const int kVelocityZFieldNumber = 3;
  float velocityz() const;
  void set_velocityz(float value);

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.Velocity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float velocityx_;
  float velocityy_;
  float velocityz_;
  mutable int _cached_size_;
  friend struct ::protobuf_Common_2fFRCommonModelProto_2eproto::TableStruct;
  friend void ::protobuf_Common_2fFRCommonModelProto_2eproto::InitDefaultsVelocityImpl();
};
// -------------------------------------------------------------------

class Attitude : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.Attitude) */ {
 public:
  Attitude();
  virtual ~Attitude();

  Attitude(const Attitude& from);

  inline Attitude& operator=(const Attitude& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Attitude(Attitude&& from) noexcept
    : Attitude() {
    *this = ::std::move(from);
  }

  inline Attitude& operator=(Attitude&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Attitude& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Attitude* internal_default_instance() {
    return reinterpret_cast<const Attitude*>(
               &_Attitude_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Attitude* other);
  friend void swap(Attitude& a, Attitude& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Attitude* New() const PROTOBUF_FINAL { return New(NULL); }

  Attitude* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Attitude& from);
  void MergeFrom(const Attitude& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Attitude* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double pitch = 1;
  void clear_pitch();
  static const int kPitchFieldNumber = 1;
  double pitch() const;
  void set_pitch(double value);

  // double roll = 2;
  void clear_roll();
  static const int kRollFieldNumber = 2;
  double roll() const;
  void set_roll(double value);

  // double yaw = 3;
  void clear_yaw();
  static const int kYawFieldNumber = 3;
  double yaw() const;
  void set_yaw(double value);

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.Attitude)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double pitch_;
  double roll_;
  double yaw_;
  mutable int _cached_size_;
  friend struct ::protobuf_Common_2fFRCommonModelProto_2eproto::TableStruct;
  friend void ::protobuf_Common_2fFRCommonModelProto_2eproto::InitDefaultsAttitudeImpl();
};
// -------------------------------------------------------------------

class GPSSignal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:DJIFRProto.Standard.GPSSignal) */ {
 public:
  GPSSignal();
  virtual ~GPSSignal();

  GPSSignal(const GPSSignal& from);

  inline GPSSignal& operator=(const GPSSignal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GPSSignal(GPSSignal&& from) noexcept
    : GPSSignal() {
    *this = ::std::move(from);
  }

  inline GPSSignal& operator=(GPSSignal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GPSSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GPSSignal* internal_default_instance() {
    return reinterpret_cast<const GPSSignal*>(
               &_GPSSignal_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(GPSSignal* other);
  friend void swap(GPSSignal& a, GPSSignal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GPSSignal* New() const PROTOBUF_FINAL { return New(NULL); }

  GPSSignal* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GPSSignal& from);
  void MergeFrom(const GPSSignal& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GPSSignal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GPSSignal_Level Level;
  static const Level Level0 =
    GPSSignal_Level_Level0;
  static const Level Level1 =
    GPSSignal_Level_Level1;
  static const Level Level2 =
    GPSSignal_Level_Level2;
  static const Level Level3 =
    GPSSignal_Level_Level3;
  static const Level Level4 =
    GPSSignal_Level_Level4;
  static const Level Level5 =
    GPSSignal_Level_Level5;
  static const Level Unknown =
    GPSSignal_Level_Unknown;
  static inline bool Level_IsValid(int value) {
    return GPSSignal_Level_IsValid(value);
  }
  static const Level Level_MIN =
    GPSSignal_Level_Level_MIN;
  static const Level Level_MAX =
    GPSSignal_Level_Level_MAX;
  static const int Level_ARRAYSIZE =
    GPSSignal_Level_Level_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Level_descriptor() {
    return GPSSignal_Level_descriptor();
  }
  static inline const ::std::string& Level_Name(Level value) {
    return GPSSignal_Level_Name(value);
  }
  static inline bool Level_Parse(const ::std::string& name,
      Level* value) {
    return GPSSignal_Level_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DJIFRProto.Standard.GPSSignal)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_Common_2fFRCommonModelProto_2eproto::TableStruct;
  friend void ::protobuf_Common_2fFRCommonModelProto_2eproto::InitDefaultsGPSSignalImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LocationCoordinate2D

// double latitude = 1;
inline void LocationCoordinate2D::clear_latitude() {
  latitude_ = 0;
}
inline double LocationCoordinate2D::latitude() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.LocationCoordinate2D.latitude)
  return latitude_;
}
inline void LocationCoordinate2D::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.LocationCoordinate2D.latitude)
}

// double longitude = 2;
inline void LocationCoordinate2D::clear_longitude() {
  longitude_ = 0;
}
inline double LocationCoordinate2D::longitude() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.LocationCoordinate2D.longitude)
  return longitude_;
}
inline void LocationCoordinate2D::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.LocationCoordinate2D.longitude)
}

// -------------------------------------------------------------------

// Velocity

// float velocityX = 1;
inline void Velocity::clear_velocityx() {
  velocityx_ = 0;
}
inline float Velocity::velocityx() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.Velocity.velocityX)
  return velocityx_;
}
inline void Velocity::set_velocityx(float value) {
  
  velocityx_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.Velocity.velocityX)
}

// float velocityY = 2;
inline void Velocity::clear_velocityy() {
  velocityy_ = 0;
}
inline float Velocity::velocityy() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.Velocity.velocityY)
  return velocityy_;
}
inline void Velocity::set_velocityy(float value) {
  
  velocityy_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.Velocity.velocityY)
}

// float velocityZ = 3;
inline void Velocity::clear_velocityz() {
  velocityz_ = 0;
}
inline float Velocity::velocityz() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.Velocity.velocityZ)
  return velocityz_;
}
inline void Velocity::set_velocityz(float value) {
  
  velocityz_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.Velocity.velocityZ)
}

// -------------------------------------------------------------------

// Attitude

// double pitch = 1;
inline void Attitude::clear_pitch() {
  pitch_ = 0;
}
inline double Attitude::pitch() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.Attitude.pitch)
  return pitch_;
}
inline void Attitude::set_pitch(double value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.Attitude.pitch)
}

// double roll = 2;
inline void Attitude::clear_roll() {
  roll_ = 0;
}
inline double Attitude::roll() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.Attitude.roll)
  return roll_;
}
inline void Attitude::set_roll(double value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.Attitude.roll)
}

// double yaw = 3;
inline void Attitude::clear_yaw() {
  yaw_ = 0;
}
inline double Attitude::yaw() const {
  // @@protoc_insertion_point(field_get:DJIFRProto.Standard.Attitude.yaw)
  return yaw_;
}
inline void Attitude::set_yaw(double value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:DJIFRProto.Standard.Attitude.yaw)
}

// -------------------------------------------------------------------

// GPSSignal

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Standard
}  // namespace DJIFRProto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::DJIFRProto::Standard::GPSSignal_Level> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DJIFRProto::Standard::GPSSignal_Level>() {
  return ::DJIFRProto::Standard::GPSSignal_Level_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Common_2fFRCommonModelProto_2eproto__INCLUDED
